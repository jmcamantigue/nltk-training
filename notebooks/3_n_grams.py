# -*- coding: utf-8 -*-
"""3-n-grams.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/123Ue1mapXssvOC2ulxtBJQbJO6Kuk64w
"""

from nltk import ngrams

# load our sample string/input
sentence = 'This is a sentence'

#save the number of n, n=1 means unigrams
n=1

# apply ngrams
unigrams = ngrams(sentence, n)

#print the output
print('Unigrams: {0}'.format(unigrams))

for gram in unigrams:
  print(gram, end=' ')

#bigrams
n=2
bigrams = ngrams(sentence, n)

for gram in bigrams:
  print(gram, end=' ')

#bigrams
n=3
trigrams = ngrams(sentence, n)

for gram in trigrams:
  print(gram, end=' ')

# split the sentence
words = sentence.split()

print(words)

# loop 3 iterations
for count in range(3):
  n = count + 1
  #save current ngrams
  current_grams = ngrams(words, n)
  
  if (n==1):
    print('Unigrams:')
  elif (n==2):
    print('\nBigrams :')
  elif (n==3):
    print('\nTrigrams :')
  
  #print the ngrams of current
  for gram in current_grams:
    print(gram, end=' ')

my_sentence = 'Natural language processing is an area of computer science and artificial intelligence concerned with the interactions between computers and human.'

my_words = my_sentence.split()


for count in range(3):
  n = count + 1
  #save current ngrams
  current_grams = ngrams(my_words, n)
  
  if (n==1):
    print('Unigrams:')
  elif (n==2):
    print('\nBigrams :')
  elif (n==3):
    print('\nTrigrams :')
  
  #print the ngrams of current
  for gram in current_grams:
    print(gram, end=' ')

from google.colab import files
uploaded = files.upload()

with open('reviews.txt', 'r') as file:
  corpus = file.read().split()

corpus

# save unigrams
unigram_list = []

n = 1
unigrams = ngrams(corpus, n)

for gram in unigrams:
  unigram_list.append(gram)

# print first 20

print(unigram_list[:20])

from collections import defaultdict

#create default dictionary
dictionary = defaultdict(list)
#make temp value for prev word
previous_word = ''
# loop for appending values to dictionary
for current_word in unigram_list:
  if previous_word != '':
    dictionary[previous_word].append(current_word[0])
  previous_word = current_word[0]

dictionary

#define a function for building conditional probabilities
def compute_conditional_probabilities(corpus):
  for key in dictionary.keys():
    # getting next word from dictionary
    next_word = dictionary[key]
    
    #remove the dups
    unique_words = set(next_word)
    num_words = len(next_word)
    
    #placeholder dict for the loop
    probabilities_given_key = {}
    
    #loop for saving value of current key
    for unique_word in unique_words:
      #save the value of current word
      probabilities_given_key[unique_word] = float(next_word.count(unique_word)) / num_words
  return probabilities_given_key

#define a function for predicting the probability of the next
def next_word_predictor(conditional_probabilities, current_word):
  # if current word is existing chect probability of next
  if current_word in conditional_probabilities:
    if next_word in conditional_probabilities[current_word]:
      return conditional_probabilities[current_word][next_word]
  return 0.0

conditional_probabilities = compute_conditional_probabilities(corpus)









